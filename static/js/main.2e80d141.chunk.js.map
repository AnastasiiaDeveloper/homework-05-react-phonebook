{"version":3,"sources":["Components/Filter.js","Components/ContactList.js","Components/ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterString","document","getElementById","value","toLowerCase","filteredContacts","this","props","contacts","filter","contact","name","includes","showFilteredContacts","setDefaultContacts","className","id","onChange","findContactByName","Component","ContactList","removeContact","Container","style","marginTop","width","TransitionGroup","class","map","number","CSSTransition","key","timeout","classNames","onClick","ContactForm","state","numberS","showErr","before","opacity","display","marginLeft","transition","background","borderRadius","textAlign","after","color","numberC","e","target","setState","contactName","some","setTimeout","push","v4","updateContacts","for","type","placeholder","addContact","App","anim","filterFunction","localStorage","setItem","JSON","stringify","parse","getItem","length","overflow","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e80d141.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass Filter extends Component {\r\n    findContactByName() {\r\n      const filterInput = document.getElementById('filter')\r\n      const filterString = filterInput.value.toLowerCase()\r\n  \r\n      if (!filterString) {\r\n        this.props.setDefaultContacts()\r\n        return\r\n      }\r\n  \r\n      const filteredContacts = this.props.contacts.filter(contact => contact.name.toLowerCase().includes(filterString))\r\n      this.props.showFilteredContacts(filteredContacts)\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <>\r\n          <h2>Find contacts by name</h2>\r\n          <input className=\"filter-form\" id=\"filter\" onChange={() => this.findContactByName()} />\r\n        </>\r\n      )\r\n    }\r\n  }\r\n  export default Filter","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Container, ListGroup, Button } from \"react-bootstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n// import uuid from 'uuid';//\r\n\r\nimport \"./style.css\";\r\n\r\nconst ContactList = ({ contacts, removeContact }) => {\r\n  // console.log(contacts);\r\n  // const removeContact1 = (id) = {\r\n  //   removeContact(contacts, id)\r\n  // }\r\n  return (\r\n    <Container style={{ marginTop: \"1rem\", width: \"340px\" }}>\r\n      <TransitionGroup className=\"todo-list\">\r\n        <ul class=\"list-group\">\r\n          {contacts.map(({ name, number, id }) => (\r\n            <CSSTransition key={id} timeout={500} classNames=\"item\">\r\n              <li class=\"list-group-item endS\">\r\n                {name} : {number}\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => removeContact(contacts, id)}\r\n                >\r\n                  &times;\r\n                </button>\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n        </ul>\r\n      </TransitionGroup>\r\n    </Container>\r\n  );\r\n};\r\nexport default ContactList;\r\n// import React, { Component } from 'react'\r\n\r\n// import {\r\n//   CSSTransition,\r\n//   TransitionGroup,\r\n// } from 'react-transition-group'\r\n\r\n// class ContactList extends Component {\r\n//     removeContact(id) {\r\n//       this.props.removeContact(this.props.contacts, id)\r\n//     }\r\n\r\n//     render() {\r\n//       return (\r\n//         <ul>\r\n//           <TransitionGroup>\r\n//             {this.props.contacts.map(contact  =>\r\n//               <CSSTransition\r\n//                 timeout={250}\r\n//                 classNames=\"fade\"\r\n//               >\r\n//                 <li>\r\n//                   {contact.name}: {contact.number}\r\n//                   <button className=\"delete-icon\" onClick={() => this.removeContact(contact.id)}>\r\n//                     &times;\r\n//                   </button>\r\n//                 </li>\r\n//               </CSSTransition>\r\n//             )}\r\n//           </TransitionGroup>\r\n//         </ul>\r\n//       )\r\n//     }\r\n//   }\r\n\r\n//   export default ContactList\r\n","import React, { Component } from \"react\";\r\nimport v4 from \"uuid/dist/v4\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    numberS: \"\",\r\n    showErr: false,\r\n    name: \"\",\r\n    before: {\r\n      opacity: 0,\r\n      display: \"block\",\r\n      marginLeft: \"350px\",\r\n      width: \"250px\",\r\n      transition: \"4s\",\r\n      background: \"red\",\r\n      borderRadius: \"5px\",\r\n      textAlign: \"center\",\r\n    },\r\n    after: {\r\n      opacity: 1,\r\n      display: \"block\",\r\n      marginLeft: \"0px\",\r\n      width: \"250px\",\r\n      transition: \"2s\",\r\n      background: \"red\",\r\n      borderRadius: \"5px\",\r\n      color: \"white\",\r\n      textAlign: \"center\",\r\n    },\r\n  };\r\n  numberC = (e) => {\r\n    let number = e.target.value;\r\n\r\n    this.setState({\r\n      numberS: number,\r\n    });\r\n  };\r\n  addContact() {\r\n    const nameInput = document.getElementById(\"name\");\r\n    const contactName = nameInput.value;\r\n\r\n    const contacts = this.props.contacts;\r\n    if (contacts.some((contact) => contact.name === contactName)) {\r\n      this.setState({ showErr: true, name: contactName });\r\n      setTimeout(() => {\r\n        this.setState({ showErr: false, name: contactName });\r\n      }, 4000);\r\n\r\n      // alert(`${contactName} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    contacts.push({\r\n      id: v4(),\r\n      name: contactName,\r\n      number: this.state.numberS,\r\n    });\r\n\r\n    this.props.updateContacts(contacts);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"border\">\r\n        <div style={this.state.showErr ? this.state.after : this.state.before}>\r\n          {this.state.name} is already in contacts.\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"exampleInputEmail1\">Name</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"name\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"exampleInputPassword1\">Number</label>\r\n          <input\r\n            type=\"text\"\r\n            class=\"form-control\"\r\n            id=\"number\"\r\n            placeholder=\"Enter number...\"\r\n            onChange={this.numberC}\r\n            value={this.state.numberS}\r\n          />\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          class=\"btn btn-primary\"\r\n          onClick={() => this.addContact()}\r\n        >\r\n          Add contacts\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Filter from \"./Components/Filter\";\nimport ContactList from \"./Components/ContactList\";\nimport ContactForm from \"./Components/ContactForm\";\nimport v4 from \"uuid/dist/v4\";\n\n// new markup\n// logic on removing contact\n// conditional rendering on 'Filter' component\n// transitions\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n    anim: { marginLeft: \"-300px\" },\n  };\n\n  contacts = [];\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ anim: { marginLeft: \"0px\", transition: \"500ms\" } });\n    }, 700);\n\n    let contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n    if (!contacts || contacts.length === 0) {\n      contacts = [\n        { id: v4(), name: \"Rosie Simpson\", number: \"459-12-56\" },\n        { id: v4(), name: \"Hermione Kline\", number: \"443-89-12\" },\n        { id: v4(), name: \"Eden Clements\", number: \"645-17-79\" },\n        { id: v4(), name: \"Annie Copeland\", number: \"227-91-26\" },\n      ];\n    }\n\n    this.contacts = contacts;\n    this.setState({ contacts });\n  }\n\n  updateContacts = (contacts, id) => {\n    const filterFunction = (contact) => contact.id !== id;\n    this.contacts = id\n      ? this.contacts.filter((contact) => filterFunction(contact))\n      : contacts;\n    this.setState({\n      contacts: id\n        ? contacts.filter((contact) => filterFunction(contact))\n        : contacts,\n    });\n    localStorage.setItem(\"contacts\", JSON.stringify(this.contacts));\n  };\n\n  setDefaultContacts = () => this.setState({ contacts: this.contacts });\n\n  showFilteredContacts = (contacts) => this.setState({ contacts });\n\n  removeContact = (contacts, id) => this.updateContacts(contacts, id);\n\n  render() {\n    let { anim } = this.state;\n    return (\n      <main>\n        <div style={{ width: \"340px\", overflow: \"hidden\" }}>\n          <h1 style={anim}>Phonebook</h1>\n        </div>\n\n        <ContactForm\n          updateContacts={this.updateContacts}\n          contacts={this.state.contacts}\n        />\n        {this.contacts.length > 0 && (\n          <Filter\n            setDefaultContacts={this.setDefaultContacts}\n            showFilteredContacts={this.showFilteredContacts}\n            contacts={this.contacts}\n          />\n        )}\n        <ContactList\n          contacts={this.state.contacts}\n          removeContact={this.removeContact}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}